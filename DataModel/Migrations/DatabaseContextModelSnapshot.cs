// <auto-generated />
using System;
using DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DataModel.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DataModel.Models.Answer.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnUpdate();

                    b.Property<bool>("IsCorrect");

                    b.Property<Guid>("QuestionId");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("DataModel.Models.Answer.AnswerLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AnswerId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LocalizationId");

                    b.HasKey("Id");

                    b.HasAlternateKey("AnswerId", "LocalizationId");

                    b.HasIndex("LocalizationId");

                    b.ToTable("AnswerLocalizations");
                });

            modelBuilder.Entity("DataModel.Models.Localization.LocaleReference", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.ToTable("LocaleReferences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "en_US",
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            Code = "da_DK",
                            Name = "Dansk"
                        });
                });

            modelBuilder.Entity("DataModel.Models.Localization.Localization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Locale");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnUpdate();

                    b.HasKey("Id");

                    b.HasAlternateKey("Text", "Locale");

                    b.HasIndex("Locale");

                    b.ToTable("Localizations");
                });

            modelBuilder.Entity("DataModel.Models.Question.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImageUrl");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnUpdate();

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DataModel.Models.Question.QuestionLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LocalizationId");

                    b.Property<Guid>("QuestionId");

                    b.Property<int>("QuestionType");

                    b.HasKey("Id");

                    b.HasAlternateKey("QuestionId", "LocalizationId", "QuestionType");

                    b.HasIndex("LocalizationId");

                    b.HasIndex("QuestionType");

                    b.ToTable("QuestionLocalizations");
                });

            modelBuilder.Entity("DataModel.Models.Question.QuestionReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("QuestionId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionReports");
                });

            modelBuilder.Entity("DataModel.Models.QuestionTypeReference", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("QuestionTypeReferences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Question"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hint"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Final"
                        });
                });

            modelBuilder.Entity("DataModel.Models.User.MetadataTypeReference", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("MetadataTypeReferences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Brand"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BuildNumber"
                        },
                        new
                        {
                            Id = 3,
                            Name = "DeviceCountry"
                        },
                        new
                        {
                            Id = 4,
                            Name = "DeviceLocale"
                        },
                        new
                        {
                            Id = 5,
                            Name = "DeviceName"
                        },
                        new
                        {
                            Id = 6,
                            Name = "MacAddress"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Manufacturer"
                        },
                        new
                        {
                            Id = 8,
                            Name = "SystemName"
                        },
                        new
                        {
                            Id = 9,
                            Name = "SystemVersion"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Timezone"
                        },
                        new
                        {
                            Id = 11,
                            Name = "UniqueId"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Version"
                        });
                });

            modelBuilder.Entity("DataModel.Models.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UniqueId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("UniqueId");

                    b.HasIndex("UniqueId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataModel.Models.User.UserAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AnswerId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("DataModel.Models.User.UserMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MetadataType");

                    b.Property<Guid>("UserId");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("UserId", "MetadataType", "Value");

                    b.HasIndex("MetadataType");

                    b.ToTable("UserMetadatas");
                });

            modelBuilder.Entity("DataModel.Models.User.UserQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("HintUsed");

                    b.Property<Guid>("QuestionId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuestions");
                });

            modelBuilder.Entity("DataModel.Models.Answer.Answer", b =>
                {
                    b.HasOne("DataModel.Models.Question.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.Models.Answer.AnswerLocalization", b =>
                {
                    b.HasOne("DataModel.Models.Answer.Answer", "Answer")
                        .WithMany("AnswerLocalizations")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Models.Localization.Localization", "Localization")
                        .WithMany("AnswerLocalizations")
                        .HasForeignKey("LocalizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.Models.Localization.Localization", b =>
                {
                    b.HasOne("DataModel.Models.Localization.LocaleReference", "LocaleReference")
                        .WithMany()
                        .HasForeignKey("Locale")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.Models.Question.QuestionLocalization", b =>
                {
                    b.HasOne("DataModel.Models.Localization.Localization", "Localization")
                        .WithMany("QuestionLocalizations")
                        .HasForeignKey("LocalizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Models.Question.Question", "Question")
                        .WithMany("QuestionLocalizations")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Models.QuestionTypeReference", "QuestionTypeReference")
                        .WithMany()
                        .HasForeignKey("QuestionType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.Models.Question.QuestionReport", b =>
                {
                    b.HasOne("DataModel.Models.Question.Question", "Question")
                        .WithMany("QuestionReports")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Models.User.User", "User")
                        .WithMany("QuestionReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.Models.User.UserAnswer", b =>
                {
                    b.HasOne("DataModel.Models.Answer.Answer", "Answer")
                        .WithMany("UserAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Models.User.User", "User")
                        .WithMany("UserAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.Models.User.UserMetadata", b =>
                {
                    b.HasOne("DataModel.Models.User.MetadataTypeReference", "MetadataTypeReference")
                        .WithMany()
                        .HasForeignKey("MetadataType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Models.User.User", "User")
                        .WithMany("Metadatas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.Models.User.UserQuestion", b =>
                {
                    b.HasOne("DataModel.Models.Question.Question", "Question")
                        .WithMany("UserQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Models.User.User", "User")
                        .WithMany("UserQuestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
